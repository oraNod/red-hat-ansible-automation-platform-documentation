# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Red Hat Inc.
# This file is distributed under the same license as the Ansible Tower API
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Tower API Guide 3.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-08 12:31-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 1.3\n"

#: ../../source/filtering.rst:3
msgid "Filtering"
msgstr ""

#: ../../source/filtering.rst:9
msgid ""
"Any collection is what the system calls a \"queryset\" and can be "
"filtered via various operators."
msgstr ""

#: ../../source/filtering.rst:11
msgid "For example, to find the groups that contain the name \"foo\":"
msgstr ""

#: ../../source/filtering.rst:17
msgid "To find an exact match:"
msgstr ""

#: ../../source/filtering.rst:23
msgid ""
"If a resource is of an integer type, you must add ``\\_\\_int`` to the "
"end to cast your string input value to an integer, like so:"
msgstr ""

#: ../../source/filtering.rst:29
msgid "Related resources can also be queried, like so:"
msgstr ""

#: ../../source/filtering.rst:35
msgid ""
"This will return all groups with users with names that include the string"
" \"John\" in them."
msgstr ""

#: ../../source/filtering.rst:37
msgid "You can also filter against multiple fields at once:"
msgstr ""

#: ../../source/filtering.rst:43
msgid ""
"This finds all groups containing a user whose name contains \"John\" "
"where the group contains the string foo."
msgstr ""

#: ../../source/filtering.rst:45
msgid "For more about what types of operators are available, refer to:"
msgstr ""

#: ../../source/filtering.rst:47
msgid "https://docs.djangoproject.com/en/dev/ref/models/querysets/"
msgstr ""

#: ../../source/filtering.rst:52
msgid ""
"You can also watch the API as the UI is being used to see how it is "
"filtering on various criteria."
msgstr ""

#: ../../source/filtering.rst:57
msgid ""
"Any additional query string parameters may be used to filter the list of "
"results returned to those matching a given value. Only fields and "
"relations that exist in the database may be used for filtering. Any "
"special characters in the specified value should be url-encoded. For "
"example:"
msgstr ""

#: ../../source/filtering.rst:63
msgid ""
"Fields may also span relations, only for fields and relationships defined"
" in the database:"
msgstr ""

#: ../../source/filtering.rst:69
msgid ""
"To exclude results matching certain criteria, prefix the field parameter "
"with ``not__``:"
msgstr ""

#: ../../source/filtering.rst:75
msgid ""
"(Added in AWX 1.4) By default, all query string filters are AND'ed "
"together, so only the results matching all filters will be returned. To "
"combine results matching any one of multiple criteria, prefix each query "
"string parameter with ``or__``:"
msgstr ""

#: ../../source/filtering.rst:82
msgid ""
"(Added in Ansible Tower 1.4.5) The default AND filtering applies all "
"filters simultaneously to each related object being filtered across "
"database relationships. The chain filter instead applies filters "
"separately for each related object. To use, prefix the query string "
"parameter with ``chain__``:"
msgstr ""

#: ../../source/filtering.rst:89
msgid ""
"If the first query above were written as "
"``?related__field=value&related__field2=othervalue``, it would return "
"only the primary objects where the same related object satisfied both "
"conditions. As written using the chain filter, it would return the "
"intersection of primary objects matching each condition."
msgstr ""

#: ../../source/filtering.rst:91
msgid ""
"Field lookups may also be used for more advanced queries, by appending "
"the lookup to the field name:"
msgstr ""

#: ../../source/filtering.rst:97
msgid "The following field lookups are supported:"
msgstr ""

#: ../../source/filtering.rst:99
msgid "``exact``: Exact match (default lookup if not specified)."
msgstr ""

#: ../../source/filtering.rst:100
msgid "``iexact``: Case-insensitive version of exact."
msgstr ""

#: ../../source/filtering.rst:101
msgid "``contains``: Field contains value."
msgstr ""

#: ../../source/filtering.rst:102
msgid "``icontains``: Case-insensitive version of contains."
msgstr ""

#: ../../source/filtering.rst:103
msgid "``startswith``: Field starts with value."
msgstr ""

#: ../../source/filtering.rst:104
msgid "``istartswith``: Case-insensitive version of startswith."
msgstr ""

#: ../../source/filtering.rst:105
msgid "``endswith``: Field ends with value."
msgstr ""

#: ../../source/filtering.rst:106
msgid "``iendswith``: Case-insensitive version of endswith."
msgstr ""

#: ../../source/filtering.rst:107
msgid "``regex``: Field matches the given regular expression."
msgstr ""

#: ../../source/filtering.rst:108
msgid "``iregex``: Case-insensitive version of regex."
msgstr ""

#: ../../source/filtering.rst:109
msgid "``gt``: Greater than comparison."
msgstr ""

#: ../../source/filtering.rst:110
msgid "``gte``: Greater than or equal to comparison."
msgstr ""

#: ../../source/filtering.rst:111
msgid "``lt``: Less than comparison."
msgstr ""

#: ../../source/filtering.rst:112
msgid "``lte``: Less than or equal to comparison."
msgstr ""

#: ../../source/filtering.rst:113
msgid ""
"``isnull``: Check whether the given field or related object is null; "
"expects a boolean value."
msgstr ""

#: ../../source/filtering.rst:114
msgid ""
"``in``: Check whether the given field's value is present in the list "
"provided; expects a list of items."
msgstr ""

#: ../../source/filtering.rst:115
msgid ""
"Boolean values may be specified as ``True`` or ``1`` for true, ``False`` "
"or ``0`` for false (both case-insensitive)."
msgstr ""

#: ../../source/filtering.rst:117
msgid ""
"Null values may be specified as ``None`` or ``Null`` (both case-"
"insensitive), though it is preferred to use the ``isnull`` lookup to "
"explicitly check for null values."
msgstr ""

#: ../../source/filtering.rst:119
msgid ""
"Lists (for the ``in`` lookup) may be specified as a comma-separated list "
"of values."
msgstr ""

