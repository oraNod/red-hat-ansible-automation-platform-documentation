# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Red Hat Inc.
# This file is distributed under the same license as the Automation Controller API Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Automation Controller API Guide 4.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-10 17:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/authentication.rst:3
msgid "Authentication Methods Using the API"
msgstr "API を使用した認証方法"

#: ../../source/authentication.rst:11
msgid "This chapter describes the numerous enterprise authentication methods, the best use case for each, and examples:"
msgstr "この章では、数多くの企業向け認証方法、それぞれの最適な使用例、および例について説明します。"

#: ../../source/authentication.rst:16
msgid "|At| is designed for organizations to centralize and control their automation with a visual dashboard for out-of-the box control while providing a REST API to integrate with your other tooling on a deeper level. |At| supports a number of authentication methods to make it easy to embed the controller into existing tools and processes to help ensure the right people can access controller resources."
msgstr "|At| は、組織が自動化を一元化して制御するために設計されており、すぐに使用できる制御用のビジュアルダッシュボードを使用して、より深いレベルで他のツールと統合するための REST API を提供します。|At| は多数の認証方法をサポートして、コントローラーを既存のツールやプロセスに簡単に組み込み、適切なユーザーがコントローラーのリソースにアクセスできるようにします。"

#: ../../source/authentication.rst:21
msgid "Session Authentication"
msgstr "セッション認証"

#: ../../source/authentication.rst:23
msgid "Session authentication is used when logging in directly to |at|’s API or UI to manually create resources (inventory, project, job template) and launch jobs in the browser. With this method, you can remain logged in for a prolonged period of time, not just for that HTTP request, but for instance, when browsing the UI or API in a browser like Chrome or Firefox. When a user logs in, a session cookie is created, which enables the user to remain logged in when navigating to different pages within the |at|. Below represents the communication that occurs between the client and server in a session."
msgstr "セッション認証は、|at| の API または UI に直接ログインして、ブラウザー上でリソース (インベントリー、プロジェクト、ジョブテンプレート) を手動で作成し、ジョブを起動するときに使用します。この方法では、その HTTP リクエストだけでなく、たとえば Chrome や Firefox などのブラウザーで UI または API を閲覧する際にも、長時間ログインしたままにすることができます。ユーザーがログインすると、セッションクッキーが作成され、ユーザーが |at| 内の別のページに移動してもログイン状態が維持されたままになります。以下は、セッションでクライアントとサーバーの間に発生する通信を表したものです。"

#: ../../source/authentication.rst:27
msgid "Using the curl tool, you can see the activity that occurs when you log into the controller."
msgstr "curl ツールを使用すると、コントローラーにログインしたときに発生するアクティビティーを確認することができます。"

#: ../../source/authentication.rst:29
msgid "GET to the ``/api/login/`` endpoint to grab the ``csrftoken`` cookie."
msgstr "``csrftoken`` クッキーを取得するには、``/api/login/`` のエンドポイントに GET します。"

#: ../../source/authentication.rst:38
msgid "POST to the ``/api/login/`` endpoint with username, password, and X-CSRFToken=<token-value>."
msgstr "ユーザー名、パスワード、および X-CSRFToken=<token-value> を指定して ``/api/login/`` エンドポイントに POST します。"

#: ../../source/authentication.rst:49
msgid "All of this is done by the |at| when you log in to the UI or API in the browser, and should only be used when authenticating in the browser. For programmatic integration with |at|, see :ref:`api_oauth2_auth`."
msgstr "これらはすべて、ブラウザーで UI や API にログインする際に |at| によって行われ、ブラウザーで認証する場合にのみ使用する必要があります。|at| とのプログラムによる統合については、:ref:`api_oauth2_auth` を参照してください。"

#: ../../source/authentication.rst:51
msgid "A typical response might look like:"
msgstr "一般的な応答は次のようになります。"

#: ../../source/authentication.rst:77
msgid "When a user is successfully authenticated with this method, the server will respond with a header called ``X-API-Session-Cookie-Name``, indicating the configured name of the session cookie. The default value is ``awx_session_id`` which you can see later in the ``Set-Cookie`` headers."
msgstr "ユーザーがこの方法で正常に認証されると、サーバーは ``X-API-Session-Cookie-Name`` というヘッダーで応答し、セッションクッキーの設定された名前を示します。デフォルト値は ``awx_session_id`` で、これは後で ``Set-Cookie`` ヘッダーで見ることができます。"

#: ../../source/authentication.rst:81
msgid "The session expiration time can be changed by specifying it in the ``SESSION_COOKIE_AGE`` parameter. Refer to :ref:`ag_session_limits` for further detail."
msgstr "セッションの有効期限は、``SESSION_COOKIE_AGE`` パラメーターで指定することで変更可能です。詳細は、:ref:`ag_session_limits` を参照してください。"

#: ../../source/authentication.rst:86
msgid "Basic Authentication"
msgstr "Basic 認証"

#: ../../source/authentication.rst:88
msgid "Basic Authentication (Basic Auth) is stateless, thus the base64-encoded ``username`` and ``password`` must be sent along with each request via the Authorization header. This can be used for API calls from curl requests, python scripts, or individual requests to the API. :ref:`api_oauth2_auth` is recommended for accessing the API when at all possible."
msgstr "Basic 認証 (Basic Auth) はステートレスであるため、base64 エンコードされた ``username`` と ``password`` を Authorization ヘッダーを介して各リクエストとともに送信する必要があります。これは、curl リクエスト、python スクリプト、または API への個別のリクエストからの API 呼び出しに使用できます。API にアクセスする場合は、可能な限り :ref:`api_oauth2_auth` を使用することを推奨します。"

#: ../../source/authentication.rst:90
msgid "Example with curl:"
msgstr "curl の例:"

#: ../../source/authentication.rst:99
msgid "For more information about the Basic HTTP Authentication scheme, see `RFC 7617 <https://datatracker.ietf.org/doc/html/rfc7617>`_."
msgstr "Basic HTTP 認証スキームの詳細は、`RFC 7617 <https://datatracker.ietf.org/doc/html/rfc7617>`_ を参照してください。"

#: ../../source/authentication.rst:103
msgid "You can disable the Basic Auth for security purposes from the Miscellaneous Authentication settings of the controller UI Settings menu:"
msgstr "コントローラーの UI 設定メニューのその他の認証設定から、セキュリティー目的で Basic 認証を無効にすることができます。"

#: ../../source/authentication.rst:110
msgid "OAuth 2 Token Authentication"
msgstr "OAuth2 トークン認証"

#: ../../source/authentication.rst:112
msgid "OAuth (Open Authorization) is an open standard for token-based authentication and authorization. OAuth 2 authentication is commonly used when interacting with the controller API programmatically. Like Basic Auth, an OAuth 2 token is supplied with each API request via the Authorization header. Unlike Basic Auth, OAuth 2 tokens have a configurable timeout and are scopable. Tokens have a configurable expiration time and can be easily revoked for one user or for the entire |at| system by an admin if needed. This can be done with the :ref:`ag_manage_utility_revoke_tokens` management command, which is covered in more detail in |ata| or by using the API as explained in :ref:`ag_oauth2_token_revoke`."
msgstr "OAuth (Open Authorization) は、トークンベースの認証と承認のためのオープンな標準規格です。OAuth 2 認証は、プログラムでコントローラー API と対話するときに一般的に使用されます。Basic 認証と同様に、OAuth 2 トークンは Authorization ヘッダーを介して各 API リクエストで提供されます。Basic 認証とは異なり、OAuth 2 トークンには設定可能なタイムアウトがあり、スコープも可能です。トークンには設定可能な有効期限があり、必要に応じて、管理者が 1 人のユーザーまたは |at| システム全体に対して簡単に失効させることができます。これは、|ata| で詳しく説明されている :ref:`ag_manage_utility_revoke_tokens` 管理コマンドを使用するか、:ref:`ag_oauth2_token_revoke` で説明されている API を使用して行うことができます。"

#: ../../source/authentication.rst:116
msgid "By default, external users such as those created by SSO are not allowed to generate OAuth tokens for security purposes. This can be changed from the Miscellaneous Authentication settings of the controller UI Settings menu:"
msgstr "デフォルトでは、SSO によって作成されたユーザーなどの外部ユーザーは、セキュリティー上の目的で OAuth トークンを生成できません。これは、コントローラーの UI 設定メニューのその他の認証設定から変更することができます。"

#: ../../source/authentication.rst:120
msgid "The different methods for obtaining OAuth 2 Access Tokens in |at| are:"
msgstr "以下のようなさまざまな方法で、|at|で OAuth 2 Access Token を取得することができます。"

#: ../../source/authentication.rst:122
msgid "Personal access tokens (PAT)"
msgstr "パーソナルアクセストークン (PAT)"

#: ../../source/authentication.rst:123
msgid "Application Token: Password grant type"
msgstr "アプリケーショントークン: パスワード付与タイプ"

#: ../../source/authentication.rst:124
msgid "Application Token: Implicit grant type"
msgstr "アプリケーショントークン: 暗黙の付与タイプ"

#: ../../source/authentication.rst:125
msgid "Application Token: Authorization Code grant type"
msgstr "アプリケーショントークン: 認証コード付与タイプ"

#: ../../source/authentication.rst:127
msgid "For more information on the above methods, see :ref:`ag_oauth2_token_auth` in the |ata|."
msgstr "上記の方法の詳細については、|ata| の :ref:`ag_oauth2_token_auth` を参照してください。"

#: ../../source/authentication.rst:130
msgid "First, a user needs to create an OAuth 2 Access Token in the API or in their User’s **Tokens** tab in the UI. For further detail on creating them through the UI, see :ref:`ug_users_tokens`. For the purposes of this example, use the PAT method for creating a token in the API. Upon token creation, the user can set the scope."
msgstr "まず、ユーザーは API または UI のユーザーの **トークン** タブで OAuth 2 アクセストークンを作成する必要があります。UI を使用してそれらを作成する方法の詳細は、:ref:`ug_users_tokens` を参照してください。この例では、API でトークンを作成するために PAT メソッドを使用します。トークンの作成時に、ユーザーはスコープを設定することができます。"

#: ../../source/authentication.rst:134
msgid "The expiration time of the token can be configured system-wide. See :ref:`ag_use_oauth_pat` for more detail."
msgstr "トークンの有効期限は、システム全体で設定できます。詳細は、:ref:`ag_use_oauth_pat` を参照してください。"

#: ../../source/authentication.rst:136
msgid "Token authentication is best used for any programmatic use of the |at| API, such as Python scripts or tools like curl, as in the example for creating a PAT (without an associated application) below."
msgstr "PAT (関連アプリケーションなし) を作成する以下の例のように、トークン認証は、|at| API をプログラムで使用する場合 (Python スクリプトや curl のようなツールなど) に最適です。"

#: ../../source/authentication.rst:138
msgid "**Curl Example**"
msgstr "**Curl の例**"

#: ../../source/authentication.rst:145
msgid "This call will return JSON data like:"
msgstr "この呼び出しは、以下のような JSON データを返します。"

#: ../../source/authentication.rst:149
msgid "The value of the ``token`` property is what you can now use to perform a GET request for an |at| resource, e.g., Hosts."
msgstr "``token`` プロパティーの値は、|at| リソース (例:Hosts) に対する GET リクエストを実行するために現時点で使用できるものです。"

#: ../../source/authentication.rst:158
msgid "Similarly, you can launch a job by making a POST to the job template that you want to launch."
msgstr "同様に、起動したいジョブテンプレートに対して POST を行うことで、ジョブを起動することができます。"

#: ../../source/authentication.rst:169
msgid "**Python Example**"
msgstr "**Python の例**"

#: ../../source/authentication.rst:171
msgid "`awxkit <https://pypi.org/project/awxkit/>`_ is an open source tool that makes it easy to use HTTP requests to access the |at| API. You can have awxkit acquire a PAT on your behalf by using the ``awxkit login`` command. Refer to the `AWX Command Line Interface <https://docs.ansible.com/automation-controller/latest/html/controllercli/index.html>`_ for more detail."
msgstr "`awxkit <https://pypi.org/project/awxkit/>`_ は、HTTP リクエストを使って簡単に |at| API にアクセスできるようにするオープンソースツールです。``awxkit login`` コマンドを使うことで、awxkit に PAT の取得を代行させることができます。詳細は、`AWX Command Line Interface <https://docs.ansible.com/automation-controller/latest/html/controllercli/index.html>`_ を参照してください。"

#: ../../source/authentication.rst:174
msgid "For more information on how to use OAuth 2 in the |at| in the context of integrating external applications, see :ref:`ag_oauth2_token_auth` in the |ata|."
msgstr "外部アプリケーションを統合する際の |at| における OAuth 2 の使用方法の詳細については、|ata| の :ref:`ag_oauth2_token_auth` を参照してください。"

#: ../../source/authentication.rst:176
msgid "If you need to write custom requests, you can write a Python script using `Python library requests <https://pypi.org/project/requests/>`_, like in this example:"
msgstr "カスタムリクエストを書く必要がある場合は、この例のように、`Python library requests <https://pypi.org/project/requests/>`_ を使って Python スクリプトを書くことができます。"

#: ../../source/authentication.rst:197
msgid "SSO Authentication"
msgstr "SSO 認証"

#: ../../source/authentication.rst:199
msgid "Single sign-on (SSO) authentication methods are fundamentally different from other methods because the authentication of the user happens external to the |at|, like Google SSO, Azure SSO, SAML, or GitHub. For example, with GitHub SSO, GitHub is the single source of truth, which verifies your identity based on the username and password you gave the controller."
msgstr "Single Sign-On (SSO) 認証方法は、Google SSO、Azure SSO、SAML、GitHub などのように、ユーザーの認証が |at| の外部で行われるため、他の方法とは根本的に異なります。たとえば、GitHub SSO の場合、GitHub が信頼できる唯一の情報源であり、これがコントローラーに指定したユーザー名とパスワードに基づいて ID を検証します。"

#: ../../source/authentication.rst:201
msgid "You can configure SSO authentication using the |at| inside a large organization with a central Identity Provider. Once you have configured an SSO method in the controller, a button for that SSO will be present on the login screen. If you click that button, it will redirect you to the Identity Provider, in this case GitHub, where you will present your credentials. If the Identity Provider verifies you successfully, then the controller will make a user linked to your GitHub user (if this is your first time logging in via this SSO method), and log you in."
msgstr "一元的なアイデンティティープロバイダーを持つ大規模な組織内部で、|at| を使用して SSO 認証を設定することができます。コントローラーで SSO の方式を設定すると、ログイン画面に SSO 用のボタンが表示されるようになります。このボタンをクリックすると、アイデンティティープロバイダー (この場合は GitHub) にリダイレクトされ、そこで認証情報を提示することになります。アイデンティティープロバイダーによる認証が正常に行われると、コントローラーは GitHub ユーザーとリンクしたユーザーを作成し (この SSO 方式で初めてログインする場合)、ログインできるようになります。"

#: ../../source/authentication.rst:203
msgid "For the various types of supported SSO authentication methods, see :ref:`ag_social_auth` and :ref:`ag_ent_auth` in the |ata|."
msgstr "サポートされているさまざまなタイプの SSO 認証方法については、|ata| の :ref:`ag_social_auth` および :ref:`ag_ent_auth` を参照してください。"
